[{"/home/the_last_crusaderr/Desktop/FullStackOpen/Part-2/phonebook-step11-12/src/index.js":"1","/home/the_last_crusaderr/Desktop/FullStackOpen/Part-2/phonebook-step11-12/src/App.js":"2","/home/the_last_crusaderr/Desktop/FullStackOpen/Part-2/phonebook-step11-12/src/services/persons.js":"3"},{"size":149,"mtime":1629358558755,"results":"4","hashOfConfig":"5"},{"size":4172,"mtime":1629787861267,"results":"6","hashOfConfig":"5"},{"size":656,"mtime":1629801094367,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"qf5sgn",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"/home/the_last_crusaderr/Desktop/FullStackOpen/Part-2/phonebook-step11-12/src/index.js",[],["17","18"],"/home/the_last_crusaderr/Desktop/FullStackOpen/Part-2/phonebook-step11-12/src/App.js",["19","20"],"import React, { useState, useEffect} from \"react\";\nimport axios from 'axios'\nimport {retrieve,remove,create,update} from './services/persons'\n\n\n\n\n\nconst Notification = ({message}) => {\n  if(message === null)\n    return null\n\n  return (\n      <div className='coloring'>\n        {message}\n      </div>\n  )\n\n\n}\n\n\n\nconst Displayer = ({ searchString, persons, searchResult,setPersons }) => {\n\n  function handleDelete(person){\n      let result = window.confirm(`Do you want to delete ${person.name}`)\n      if (result === true) {\n        remove(person.id)\n        retrieve().then( (initialData) => setPersons(initialData)  )\n      }\n  }\n\n\n\n  if (searchString === \"\") {\n    return (\n      <>\n        <ul>\n          {persons.map((person) => (\n            <li key={person.name}>\n              {\" \"}\n              {person.name} {person.number}\n              <button onClick={() => handleDelete(person)}> Delete </button>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <ul>\n          {searchResult.map((search) => (\n            <li key={search.name}>\n              {\" \"}\n              {search.name} {search.number}\n              <button onClick={() => handleDelete(search)}> Delete </button>\n            </li>\n          ))}\n        </ul>\n      </>\n    );\n  }\n};\n\n\n\nconst App = () => {\n    \n    \n    \n    \n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState(\"\");\n  const [newNum, setNewNum] = useState(\"\");\n  const [searchString, setSearchString] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [notif,setNotif] = useState(null)\n  \n  \n  \n  \n  // using the useEffect for fetching the data from server and setting it to the component after first rendering..\n    \n    useEffect( () => {\n        retrieve().then( (initialData) => setPersons(initialData)  )\n      }\n  , [])\n\n    \n    \n\n  function addName(event) {\n    //if trying to add the people in the phonebook\n    if (searchString === \"\") {\n      event.preventDefault();\n      const nameObject = {\n        name: newName,\n        number: newNum,\n        date: new Date(),\n        id: persons.length + 1\n      };\n\n      console.log(\"button clicked\", event.target);\n      if (persons.find((person) => person.name === nameObject.name) === undefined) {\n        const newData = create(nameObject).then( (person) => setNotif( `${person.name} is added` ) )\n        retrieve().then( (initialData) => setPersons(initialData) )\n        //setPersons(persons.concat(nameObject));\n      }\n      else {\n          let result = window.confirm(`${nameObject.name}is already added to phonebook,replace the old number with new one`)\n          if(result === true) {\n            let oldPerson = persons.find((person) => person.name === nameObject.name)\n            let oldId = oldPerson.id\n            nameObject.id = oldId\n            update(nameObject,oldId)\n            retrieve().then((initialData) => setPersons(initialData))\n          }\n      }\n    }\n\n    //if searching on the phonebook\n    else {\n      event.preventDefault();\n      const searchArray = persons.filter(\n        (person) => person.name.toLowerCase().search(searchString.toLowerCase()) !== -1\n      );\n\n      setSearchResult(searchArray);\n    }\n  }\n\n  function handleNewName(event) {\n    setNewName(event.target.value);\n  }\n\n  function handleNewNum(event) {\n    setNewNum(event.target.value);\n  }\n\n  function handlesetSearchString(event) {\n    setSearchString(event.target.value);\n  }\n\n  return (\n    <div>\n      <Notification message={notif}/>\n      <h2>Phonebook</h2>\n      <form onSubmit={addName}>\n        filter shown with\n        <input value={searchString} onChange={handlesetSearchString} />\n        <h2>add a new</h2>\n        <div>\n          name: <input value={newName} onChange={handleNewName} />\n        </div>\n        number: <input value={newNum} onChange={handleNewNum} />\n        <br />\n        <button type=\"submit\">add</button>\n      </form>\n\n      <Displayer\n        searchString={searchString}\n        persons={persons}\n        searchResult={searchResult}\n        setPersons = {setPersons}\n      />\n    </div>\n  );\n};\n\nexport default App; \n","/home/the_last_crusaderr/Desktop/FullStackOpen/Part-2/phonebook-step11-12/src/services/persons.js",["21"],"import axios from 'axios'\nconst baseURL = '/api/persons'      \n\n\n\n\n\n   function create(newObject) {\n       const request = axios.post(baseURL, newObject)\n       return request.then((response) => response.data)\n   }\n\n\n function retrieve(){\n        const request = axios.get(baseURL)\n        return request.then (  (response)  => response.data)\n}\n\n\n function remove (id) {\n    const promise = axios.delete(`${baseURL}/${id}`)\n}\n\n\n    function update(newObject,id){\n        const request = axios.put( `${baseURL}/${id}`,newObject)\n        return request.then( response => response.data   )\n    }\n\n\n\nexport {\n    create,\n    retrieve,\n    remove,\n    update\n}\n",{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":2,"column":8,"nodeType":"28","messageId":"29","endLine":2,"endColumn":13},{"ruleId":"26","severity":1,"message":"30","line":107,"column":15,"nodeType":"28","messageId":"29","endLine":107,"endColumn":22},{"ruleId":"26","severity":1,"message":"31","line":21,"column":11,"nodeType":"28","messageId":"29","endLine":21,"endColumn":18},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'newData' is assigned a value but never used.","'promise' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]